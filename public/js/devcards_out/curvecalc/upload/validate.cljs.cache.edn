{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name curvecalc.upload.validate, :imports nil, :requires {c curvecalc.calc, curvecalc.calc curvecalc.calc, curvecalc.stringstuff curvecalc.stringstuff}, :uses {range-stringer curvecalc.stringstuff, dig1 curvecalc.stringstuff}, :defs {buckets-valid? {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 111, :column 7, :end-line 111, :end-column 21, :arglists (quote ([keyorder validation]))}, :name curvecalc.upload.validate/buckets-valid?, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 21, :method-params ([keyorder validation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([keyorder validation]))}, combine-buckets {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 73, :column 7, :end-line 73, :end-column 22, :arglists (quote ([numgrades buckets]))}, :name curvecalc.upload.validate/combine-buckets, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 22, :method-params ([numgrades buckets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([numgrades buckets]))}, sorted-gradelist {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 10, :column 7, :end-line 10, :end-column 23, :arglists (quote ([column]))}, :name curvecalc.upload.validate/sorted-gradelist, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 23, :method-params ([column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([column]))}, validate-one-grade {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 83, :column 7, :end-line 83, :end-column 25, :arglists (quote ([distro buckets grade-key]))}, :name curvecalc.upload.validate/validate-one-grade, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 25, :method-params ([distro buckets grade-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 3, :fn-var true, :arglists (quote ([distro buckets grade-key]))}, report-median {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 39, :column 7, :end-line 39, :end-column 20, :arglists (quote ([sgl])), :doc "in: grade list, sorted, non-grades stripped.\n  out: string that reports whether the median is compliant or not. "}, :name curvecalc.upload.validate/report-median, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 20, :method-params ([sgl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sgl])), :doc "in: grade list, sorted, non-grades stripped.\n  out: string that reports whether the median is compliant or not. "}, report-validation {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 124, :column 7, :end-line 124, :end-column 24, :arglists (quote ([sgl]))}, :name curvecalc.upload.validate/report-validation, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 24, :method-params ([sgl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sgl]))}, choose-distro {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 5, :column 7, :end-line 5, :end-column 20, :arglists (quote ([numgrades]))}, :name curvecalc.upload.validate/choose-distro, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 20, :method-params ([numgrades]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([numgrades]))}, bucketizer {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 70, :column 7, :end-line 70, :end-column 17, :arglists (quote ([column]))}, :name curvecalc.upload.validate/bucketizer, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 17, :method-params ([column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([column]))}, report-builder {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 115, :column 7, :end-line 115, :end-column 21, :arglists (quote ([validation grade-key]))}, :name curvecalc.upload.validate/report-builder, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 21, :method-params ([validation grade-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([validation grade-key]))}, validate-grades {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 101, :column 7, :end-line 101, :end-column 22, :arglists (quote ([column numgrades distro-key keyorder]))}, :name curvecalc.upload.validate/validate-grades, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 22, :method-params ([column numgrades distro-key keyorder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 4, :fn-var true, :arglists (quote ([column numgrades distro-key keyorder]))}, find-median {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 15, :column 7, :end-line 15, :end-column 18, :arglists (quote ([sgl])), :doc "sorted numeric list -> vector of length 1 or 2 w median(s). nil for length below 2. needs testing for 2, 3."}, :name curvecalc.upload.validate/find-median, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 18, :method-params ([sgl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sgl])), :doc "sorted numeric list -> vector of length 1 or 2 w median(s). nil for length below 2. needs testing for 2, 3."}, median-valid? {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 26, :column 7, :end-line 26, :end-column 20, :arglists (quote ([median c distro-key]))}, :name curvecalc.upload.validate/median-valid?, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 20, :method-params ([median c distro-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([median c distro-key]))}, find-bucket {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :line 57, :column 7, :end-line 57, :end-column 18, :arglists (quote ([grade]))}, :name curvecalc.upload.validate/find-bucket, :variadic false, :file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/validate.cljs", :end-column 18, :method-params ([grade]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grade]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:valid :min :B- :A :B+ :else :C-F :A+_to_A- :complex :simple :maximum :B :invalid :A- :high :fault :numingrade :evaluation :details :max :label :minimum :low :A+ :C+ :p :B-_to_F}, :order [:complex :simple :valid :details :else :A+ :A :A- :B+ :B :B- :C+ :C-F :A+_to_A- :B-_to_F :min :max :evaluation :fault :label :maximum :minimum :numingrade :invalid :high :low :p]}, :doc nil}