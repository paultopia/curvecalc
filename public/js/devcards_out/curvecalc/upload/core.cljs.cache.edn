{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name curvecalc.upload.core, :imports nil, :requires {curvecalc.state curvecalc.state, cljs.core.async cljs.core.async, goog.labs.format.csv goog.labs.format.csv, d curvecalc.upload.display, curvecalc.upload.display curvecalc.upload.display, curvecalc.footer curvecalc.footer}, :uses {file-data curvecalc.state, <! cljs.core.async, chan cljs.core.async, footer-component curvecalc.footer, >! cljs.core.async, parse goog.labs.format.csv, put! cljs.core.async}, :defs {extract-result {:name curvecalc.upload.core/extract-result, :file "src/curvecalc/upload/core.cljs", :line 28, :column 1, :end-line 28, :end-column 20, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 28, :column 6, :end-line 28, :end-column 20}}, disclaimer-component {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 58, :column 7, :end-line 58, :end-column 27, :arglists (quote ([]))}, :name curvecalc.upload.core/disclaimer-component, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, upload-reqs {:name curvecalc.upload.core/upload-reqs, :file "src/curvecalc/upload/core.cljs", :line 31, :column 1, :end-line 31, :end-column 17, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 31, :column 6, :end-line 31, :end-column 17}}, first-file {:name curvecalc.upload.core/first-file, :file "src/curvecalc/upload/core.cljs", :line 19, :column 1, :end-line 19, :end-column 16, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 19, :column 6, :end-line 19, :end-column 16}}, transpose {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 25, :column 7, :end-line 25, :end-column 16, :arglists (quote ([m]))}, :name curvecalc.upload.core/transpose, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, calculate {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 16, :column 6, :end-line 16, :end-column 15}, :name curvecalc.upload.core/calculate, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists nil}, validation-page {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 78, :column 7, :end-line 78, :end-column 22, :arglists (quote ([]))}, :name curvecalc.upload.core/validation-page, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, input-component {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 48, :column 7, :end-line 48, :end-column 22, :arglists (quote ([]))}, :name curvecalc.upload.core/input-component, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, explanation-component {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 53, :column 7, :end-line 53, :end-column 28, :arglists (quote ([]))}, :name curvecalc.upload.core/explanation-component, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, put-upload {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([e]))}, :name curvecalc.upload.core/put-upload, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 17, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, file-upload-component {:protocol-inline nil, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 71, :column 7, :end-line 71, :end-column 28, :arglists (quote ([]))}, :name curvecalc.upload.core/file-upload-component, :variadic false, :file "src/curvecalc/upload/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, file-reads {:name curvecalc.upload.core/file-reads, :file "src/curvecalc/upload/core.cljs", :line 32, :column 1, :end-line 32, :end-column 16, :meta {:file "/Users/pgowder/code/curvecalc/curvecalc/src/curvecalc/upload/core.cljs", :line 32, :column 6, :end-line 32, :end-column 16}}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:ul :else :name :li :recur :type :h5 :title :div :div.container :id :b :input :on-change :h3 :p :accept}, :order [:recur :else :input :type :id :title :accept :name :on-change :div :p :b :h5 :ul :li :div.container :h3]}, :doc "experimental functionality to read user-supplied CSV file and test it against grade curve. Needs refactor into better namespaces. also needs tests, better display.\n\n  future functionality:\n  1.  let users choose how to round fractional grades (right now no rounding is equivalent to rounding down)\n  2.  more attractive display.\n  3.  give users option re permissible medians in two-value cases.\n  4.  one day: suggest grades."}