The plan:

1.  Build up a tree data structure where root node is empty and every node has children of each permissible cut-range of the next level.  I.e., first node will be every permissible A+, considering A+ alone.  Then that node will have children of every permissible A, given the existing cut-point for A+, and so on.  Store path to get to node (as vector of ranges) in every node.  There's probably a recursive algorithm for this.

1.5  A node is just defined by its grade range, top level, and bottom level.

2.  At end of branch (when we get to C- etc.), if there are permissible nodes for C-, then the entire path is permissible. So add it to a set of permissible paths.

3.  When tree is complete, take permissible nodes and calculate loss function for each.  Loss function (tentatively) is just sum of absolute values of distances from ideal distribution. Pick distribution with lowest loss function.

4.  Then I need to develop sub-distribution ranges. Probably the easiest thing to do there would just be to divide the range by 3, then set the cut-points at thirds.  Can tweak around the edges there without losing anything. 
