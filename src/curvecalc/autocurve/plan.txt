The plan:

1.  Build up a tree data structure where root node is empty and every node has children of each permissible cut-range of the next level.  I.e., first node will be every permissible A+, considering A+ alone.  Then that node will have children of every permissible A, given the existing cut-point for A+, and so on.  Store path to get to node (as vector of ranges) in every node.  There's probably a recursive algorithm for this.

1.5  A node is just defined by its grade range, top level, and bottom level.

2.  At end of branch (when we get to C- etc.), if there are permissible nodes for C-, then the entire path is permissible. So add it to a set of permissible paths.

3.  When tree is complete, take permissible nodes and calculate loss function for each.  Loss function (tentatively) is just sum of absolute values of distances from ideal distribution. Pick distribution with lowest loss function.

4.  Then I need to develop sub-distribution ranges. Probably the easiest thing to do there would just be to divide the range by 3, then set the cut-points at thirds.  Can tweak around the edges there without losing anything. 


ABOLISHING THAT PLAN.  HERE COMES A NEW PLAN: 

1.  Get uniques from dataset.

2.  Combinatorically generate all partitions from the set of uniques with any legal number.  Where legal number = number of partitions with 0 A+s and 0 C-s, with just one of those, and with two of those. The partitions function from clojure.math.combinatorics will probably do that.

3.  Test each partition.  If it passes, shove it into a vector.  This is just a freaking filter.  For the just-one-of-those partitions, will have to test with just A+ and just C-, but that's ok.

4.  Then carry out steps 3 and 4 from above.  

SOME DETAIL: 


Generate all cuts: combinatorics partition of uniques vector (limited to permissible sizes) plus filter by flattened x == uniques vector 

Then multiply out and sum each bucket by frequencies from original grade dataset to get total in each bucket to test vs permissible distro 

See different and probably better ways to generate all cuts here:
https://groups.google.com/forum/m/#!searchin/clojure/Combinatorics$20/clojure/DoEMT45VpAo
